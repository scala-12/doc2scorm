# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret = "TsLWj4[^1N<7nrI/>EkyPDTO[dnh<7_R[j;cN0:lGK6Mm`0048C@3PK]4KR6HobL"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Registers the error handler
# ~~~~~
play.http.errorHandler = "utils.ErrorHandler"

# Registers the request handler
# ~~~~~
play.http.requestHandler = "play.api.http.DefaultHttpRequestHandler"

# Registers the filters
# ~~~~~
play.http.filters = "utils.Filters"

# The application DI modules
# ~~~~~
play.modules.enabled += "modules.SilhouetteModule"

# Upload file size limit
play.http.parser.maxDiskBuffer = 20M

# Security Filter Configuration - Content Security Policy
# ~~~~~
#play.filters.headers.contentSecurityPolicy
# default-src
# 'self'
# img-src
# 'self'
# fbcdn-profile-a.akamaihd.net (Facebook)
# *.twimg.com (Twitter)
# *.googleusercontent.com (Google)
# *.xingassets.com (Xing)
# vk.com (VK)
# *.yimg.com (Yahoo)
# secure.gravatar.com
# style-src
# 'self'
# 'unsafe-inline'
# cdnjs.cloudflare.com
# maxcdn.bootstrapcdn.com
# cdn.jsdelivr.net
# fonts.googleapis.com
# 'unsafe-inline' (in-line css found in bootstrap.min.js)
# font-src
# 'self'
# fonts.gstatic.com
# fonts.googleapis.com
# cdnjs.cloudflare.com
# script-src
# 'self'
# clef.io
# connect-src
# 'self'
# twitter.com
# *.xing.com
# frame-src
# clef.io
play.filters.headers.contentSecurityPolicy = "default-src 'self'; img-src 'self' fbcdn-profile-a.akamaihd.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com; style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com; font-src 'self' fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com; script-src 'self' 'unsafe-eval' clef.io; connect-src 'self' twitter.com *.xing.com; frame-src clef.io; object-src 'self'"

include "silhouette.conf"

# Default database configuration
slick {
  dbs.default {
    driver = "slick.driver.MySQLDriver$"

    db {
      driver = "com.mysql.jdbc.Driver"
      url = "jdbc:mysql://127.0.0.1/doc2scorm?characterEncoding=UTF-8"
      user = "root"
      password = "1234"
    }
  }

  default = "db.models.*"
}

# Default configuration for actors
akka {
  actor.provider = "akka.remote.RemoteActorRefProvider"
  remote.netty.tcp {
    hostname = "127.0.0.1"
    port = 0
    log-remote-lifecycle-events = off
  }
}

# Default akka cluster configs
cluster {
  system-name = "cluster-system"
  supervisor-name = "cluster-converter"
  converter-count = 0

  akka {
    actor.provider = "akka.cluster.ClusterActorRefProvider"

    remote.netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }

    cluster {
      seed-nodes = [
        #        "akka.tcp://"${cluster.system-name}"@127.0.0.1:0"
      ]
      metrics.enabled = off
    }
  }
}
play.akka.actor-system = ${cluster.system-name}

# Default temp dirs
tmp {
  # dir = "/doc2scorm/tmp"
  doc.dir {
    root = ${tmp.dir}"/docs"
    # Doc was converted on localhost
    local = ${tmp.doc.dir.root}"/docs_converted_on_localhost"
    # Doc was upload on host only
    upload = ${tmp.doc.dir.root}"/docs_upload"
    # Doc was converted on other host
    remote = ${tmp.doc.dir.root}"/docs_converted_on_remote"
    # Doc was not converted
    unconverted = ${tmp.doc.dir.root}"/docs_unconverted"
  }
  course.dir {
    root = ${tmp.dir}"/courses"
    # Course was converted for localhost
    local = ${tmp.course.dir.root}"/courses_for_localhost"
    # Course was converted for other host
    sent = ${tmp.course.dir.root}"/courses_for_remote"
    # Course in conversion
    actors = ${tmp.course.dir.root}"/actors_courses"
  }
}

# Default path to LibreOffice with program "soffice"
#libreoffice.program.path =

include "local.conf"